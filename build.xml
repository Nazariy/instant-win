<?xml version="1.0" encoding="UTF-8"?>
<project name="Instant Win" basedir="." default="main">
    
    <property name="dir.src" value="${project.basedir}/src"/>
    <property name="dir.build" value="${project.basedir}/build"/>
    <property name="dir.vendor" value="${project.basedir}/vendor"/>
    <property name="dir.reports" value="${project.basedir}/test-reports"/>
    <property name="dir.reports.pdepend" value="${dir.reports}/pdepend"/>
    <property name="dir.docs" value="${dir.reports}/docs"/>
    <property name="dir.docs.phpdoc" value="${dir.docs}/phpdoc"/>
    <property name="dir.docs.docblox" value="${dir.docs}/docblox"/>

    <!-- Filesets -->
    <fileset id="sourcecode" dir="${dir.src}">
        <include name="**/*.php"/>
    </fileset>

    <!-- Default target -->
    <target name="main">
        <echo msg="See:"/>
        <echo msg=" * phing -l"/>
    </target>

	<target name="check"
		description="All quality checks"
		depends="build:prepare,build:check"/>

    <target name="build"
            description="Creates release build"
            depends="build:prepare,build:package"/>

    <!-- SUBTARGETS -->

    <!-- Check target -->
    <target name="build:check"
            depends="check:cs, check:md, check:depend, check:cpd"/>

    <!-- phploc -->
    <target name="doc:phploc">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${dir.reports}/phploc.csv" />
            <arg path="${dir.src}" />
        </exec>
    </target>

    <!-- Project build prepare -->
    <target name="build:prepare">
        <echo msg="Creating build directories ..."/>
        <mkdir dir="${dir.docs}"/>
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.docs.phpdoc}"/>
        <mkdir dir="${dir.docs.docblox}"/>
        <mkdir dir="${dir.reports}"/>
        <mkdir dir="${dir.reports.pdepend}"/>
    </target>

    <!-- PHPDOC API documentation target -->
    <target name="doc:phpdoc">
        <echo msg="Generating API documentation with PHPDoc..."/>
        <exec passthru="true" checkreturn="true" command='phpdoc -d ./src --defaultpackagename="${phing.project.name}" --title="${phing.project.name} :: API Documentation" --target="${dir.docs.phpdoc}" --sourcecode -c phpdoc.xml' />
    </target>

    <!-- DocBlox API documentation target -->
    <target name="doc:docblox">
        <echo msg="Generating API Documentation with DocBlox ..."/>
        <docblox title="${phing.project.name} :: API Documentation"
                 destdir="${dir.docs.docblox}"
                 quiet="false">
            <fileset refid="sourcecode"/>
        </docblox>
    </target>

    <!-- PSR2 code sniffer -->
    <target name="check:cs">
        <echo msg="Checking coding standard ..."/>
        <phpcodesniffer standard="PSR2"
                        showSniffs="true"
                        showWarnings="true">
            <fileset refid="sourcecode"/>
            <formatter type="checkstyle"
                       outfile="${dir.reports}/checkstyle.xml"/>
        </phpcodesniffer>
    </target>

    <!-- copy/paste detector -->
    <target name="check:cpd">
		<!-- Waiting on  http://www.phing.info/trac/ticket/1035 -->
        <!--
		<echo msg="Checking similar code blocks ..."/>
        <phpcpd>
            <fileset refid="sourcecode"/>
            <formatter type="pmd" outfile="${dir.reports}/pmd-cpd.xml"/>
        </phpcpd>
		-->
    </target>

    <!-- Mess detector -->
    <target name="check:md">
        <echo msg="Generating code metrics ..."/>
        <phpmd rulesets="codesize,unusedcode">
            <fileset refid="sourcecode"/>
            <formatter type="xml" outfile="${dir.reports}/pmd.xml"/>
        </phpmd>
    </target>

    <!-- Code dependency -->
    <target name="check:depend">
        <echo msg="Checking coupling and dependency ..."/>
        <phpdepend file="${dir.src}">
            <logger type="jdepend-xml"
                    outfile="${dir.reports.pdepend}/jdepend.xml"/>
            <logger type="jdepend-chart"
                    outfile="${dir.reports.pdepend}/dependencies.svg"/>
            <logger type="overview-pyramid"
                    outfile="${dir.reports.pdepend}/overview-pyramid.svg"/>
        </phpdepend>
    </target>

    <!-- Package Build -->
    <target name="build:package">
        <!-- Build Tar file -->
        <!-- @todo Rewrite to use exec instead of having dependency on Archive_Tar (which doesn't play nice with Composer) -->
        <tar basedir="${project.basedir}" destfile="${dir.build}/release.tar.gz" compression="gzip" includeemptydirs="true">
            <fileset dir=".">
                <include name="scripts/**" />
                <include name="src/**" />
                <include name="vendor/**" />
            </fileset>
        </tar>
    </target>

</project>
